from langchain.llms.together import Together
import logging
from typing import Any, Dict, List, Optional

from aiohttp import ClientSession
from langchain_core.pydantic_v1 import Extra, SecretStr, root_validator

from langchain.callbacks.manager import (
    AsyncCallbackManagerForLLMRun,
    CallbackManagerForLLMRun,
)
from langchain.llms.base import LLM
from langchain.utilities.requests import Requests
from langchain.utils import convert_to_secret_str, get_from_dict_or_env

logger = logging.getLogger(__name__)


class myTogether(Together):
    mybase_url: str
    mytogether_api_key: str
    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """Call out to Together's text generation endpoint.

        Args:
            prompt: The prompt to pass into the model.

        Returns:
            The string generated by the model.
        """

        headers = {
            'x-api-key': self.mytogether_api_key,
            'Content-Type': "application/json",
        }
        payload: Dict[str, Any] = {
            "query": {
                "model": self.model,
                "temperature": self.temperature,
                "prompt": prompt,
            },
            "user_id": "test",
            "client_id": "Yusef",
            "conversation_id": "00000",
            "platform": "Web",
            "genAiProvider": "togetherai"
        }

        # filter None values to not pass them to the http payload
        payload["query"] = {k: v for k, v in payload["query"].items() if v is not None}

        request = Requests(headers=headers)
        response = request.post(url=self.mybase_url, data=payload)

        if response.status_code >= 500:
            raise Exception(f"Together Server: Error {response.status_code}")
        elif response.status_code >= 400:
            raise ValueError(f"Together received an invalid payload: {response.text}")
        elif response.status_code != 200:
            raise Exception(
                f"Together returned an unexpected response with status "
                f"{response.status_code}: {response.text}"
            )

        data = response.json()
        # if data.get("status") != "finished":
            # err_msg = data.get("error", "Undefined Error")
            # Print the entire response for debugging
        return data['result']['text']


    async def _acall(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[AsyncCallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """Call Together model to get predictions based on the prompt.

        Args:
            prompt: The prompt to pass into the model.

        Returns:
            The string generated by the model.
        """
        headers = {
            'x-api-key': self.mytogether_api_key,
            'Content-Type': "application/json",
        }
        payload: Dict[str, Any] = {
            "query": {
                "model": self.model,
                "temperature": self.temperature,
                "prompt": prompt,
            },
            "user_id": "test",
            "client_id": "Yusef",
            "conversation_id": "00000",
            "platform": "Web",
            "genAiProvider": "togetherai"
        }

        # filter None values to not pass them to the http payload
        payload["query"] = {k: v for k, v in payload["query"].items() if v is not None}

        async with ClientSession() as session:
            async with session.post(
                self.mybase_url, json=payload, headers=headers
            ) as response:
                if response.status >= 500:
                    raise Exception(f"Together Server: Error {response.status}")
                elif response.status >= 400:
                    raise ValueError(
                        f"Together received an invalid payload: {response.text}"
                    )
                elif response.status != 200:
                    raise Exception(
                        f"Together returned an unexpected response with status "
                        f"{response.status}: {response.text}"
                    )

                response_json = await response.json()

                # if response_json.get("status") != "finished":
                #     err_msg = response_json.get("error", "Undefined Error")
                #     raise Exception(err_msg)
                print('response_json')
                return response_json['result']['text']
                # output = self._format_output(response_json)
                # return output
